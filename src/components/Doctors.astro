---
import DoctorCard from "@components/ui/DoctorCard.astro";
import ArrowLeft from "@assets/icons/arrowLeft.svg";
import ArrowRight from "@assets/icons/arrowRight.svg";
import doctors from "@data/doctors";
---

<section
  id="doctors"
  aria-labelledby="doctors-title"
  class="bg-gradient-to-br from-slate-50 to-blue-100 py-16 sm:py-24 opacity-0 translate-y-8 transition-all duration-700 ease-out"
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <header class="text-center mb-12">
      <h2
        id="doctors-title"
        class="text-3xl md:text-4xl font-bold text-blue-900 tracking-tight"
      >
        Conoce a Nuestros Veterinarios
      </h2>
      <p class="mt-4 text-lg text-slate-700 max-w-2xl mx-auto">
        Nuestro equipo está comprometido con brindar atención experta y cercana
        a tus mascotas.
      </p>

      <div class="embla relative mt-10">
        <div class="embla__viewport overflow-hidden">
          <div class="embla__container flex">
            {
              doctors.map((doctor) => (
                <div class="embla__slide flex-[0_0_90%] sm:flex-[0_0_50%] lg:flex-[0_0_25%] pl-4">
                  {/* Cada tarjeta también tiene su estado inicial */}
                  <div class="doctor-slide-content opacity-0 translate-y-4 transition-all duration-500 ease-out">
                    <DoctorCard
                      name={doctor.name}
                      specialty={doctor.specialty}
                      experience={doctor.experience}
                      location={doctor.location}
                      imageUrl={doctor.imageUrl}
                    />
                  </div>
                </div>
              ))
            }
          </div>
        </div>

        <button
          class="embla__prev absolute top-1/2 -translate-y-1/2 left-[-1rem] md:left-[-2rem] bg-white rounded-full p-2 shadow-lg disabled:opacity-30"
        >
          <ArrowLeft class="w-6 h-6 text-orange-500" />
        </button>
        <button
          class="embla__next absolute top-1/2 -translate-y-1/2 right-[-1rem] md:right-[-2rem] bg-white rounded-full p-2 shadow-lg disabled:opacity-30"
        >
          <ArrowRight class="w-6 h-6 text-orange-500" />
        </button>
      </div>
    </header>
  </div>
</section>

<script>
  import EmblaCarousel from "embla-carousel";

  document.addEventListener("DOMContentLoaded", () => {
    const doctorsSection = document.getElementById("doctors");
    if (!doctorsSection) return;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.remove("opacity-0", "translate-y-8");

            const slides = entry.target.querySelectorAll(
              ".doctor-slide-content"
            );
            slides.forEach((slide, index) => {
              setTimeout(() => {
                // Quitamos las clases de cada tarjeta individualmente
                slide.classList.remove("opacity-0", "translate-y-4");
              }, 150 * index); // Retraso escalonado
            });

            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.4 }
    );

    observer.observe(doctorsSection);

    //Solucion al error que no se ejecutaba los botones de doctores, teniamos que ser mas especificos porque si no tomaba el boton de promociones
    const emblaNode = doctorsSection.querySelector(".embla");

    //Esto lo hacemos para asegurarnos de que emblaNode no sea null y no lance error el tpyescript
    if (emblaNode) {
      const viewportNode = emblaNode.querySelector(
        ".embla__viewport"
      ) as HTMLElement;
      const prevBtn = emblaNode.querySelector(
        ".embla__prev"
      ) as HTMLButtonElement;
      const nextBtn = emblaNode.querySelector(
        ".embla__next"
      ) as HTMLButtonElement;

      if (viewportNode && prevBtn && nextBtn) {
        const emblaApi = EmblaCarousel(viewportNode, {
          loop: false,
          align: "start",
        });

        // actualizar el estado de los botones
        const updateButtons = () => {
          // Ahora no dará error porque sabe que los botones son HTMLButtonElement.
          prevBtn.disabled = !emblaApi.canScrollPrev();
          nextBtn.disabled = !emblaApi.canScrollNext();
        };

        prevBtn.addEventListener("click", () => emblaApi.scrollPrev(), false);
        nextBtn.addEventListener("click", () => emblaApi.scrollNext(), false);

        // Actualizamos los botones al inicio y en cada cambio
        emblaApi.on("select", updateButtons);
        emblaApi.on("init", updateButtons);
      }
    }
  });
</script>
